AOIU_1:80:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.ENCRYPT_MODE => -Cipher.ENCRYPT_MODE
AOIU_2:85:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => -bytesRead
AOIU_3:95:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.DECRYPT_MODE => -Cipher.DECRYPT_MODE
AOIU_4:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => -bytesRead
AOIS_1:80:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.ENCRYPT_MODE => Cipher.ENCRYPT_MODE++
AOIS_2:80:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.ENCRYPT_MODE => Cipher.ENCRYPT_MODE--
AOIS_3:85:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => bytesRead++
AOIS_4:85:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => bytesRead--
AOIS_5:95:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.DECRYPT_MODE => Cipher.DECRYPT_MODE++
AOIS_6:95:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.DECRYPT_MODE => Cipher.DECRYPT_MODE--
AOIS_7:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => bytesRead++
AOIS_8:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => bytesRead--
ROR_1:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) > -1
ROR_2:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) >= -1
ROR_3:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) < -1
ROR_4:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) <= -1
ROR_5:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) == -1
ROR_6:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   true
ROR_7:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   false
ROR_8:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) > -1
ROR_9:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) >= -1
ROR_10:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) < -1
ROR_11:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) <= -1
ROR_12:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   (bytesRead = in.read( buffer )) == -1
ROR_13:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   true
ROR_14:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>   false
COI_1:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>  !((bytesRead = in.read( buffer )) != -1)
COI_2:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): (bytesRead = in.read( buffer )) != -1  =>  !((bytesRead = in.read( buffer )) != -1)
LOI_1:80:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.ENCRYPT_MODE => ~Cipher.ENCRYPT_MODE
LOI_2:85:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => ~bytesRead
LOI_3:95:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):Cipher.DECRYPT_MODE => ~Cipher.DECRYPT_MODE
LOI_4:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):bytesRead => ~bytesRead
SDL_1:60:void_writeKey(javax.crypto.SecretKey,java.io.File): javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.spec.DESedeKeySpec keyspec = (javax.crypto.spec.DESedeKeySpec) keyfactory.getKeySpec( key, javax.crypto.spec.DESedeKeySpec.class ); byte[] rawkey = keyspec.getKey(); java.io.FileOutputStream out = new java.io.FileOutputStream( f ); out.write( rawkey ); out.close();  =>   javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.spec.DESedeKeySpec keyspec = (javax.crypto.spec.DESedeKeySpec) keyfactory.getKeySpec( key, javax.crypto.spec.DESedeKeySpec.class ); byte[] rawkey = keyspec.getKey(); java.io.FileOutputStream out = new java.io.FileOutputStream( f ); out.close();
SDL_2:60:void_writeKey(javax.crypto.SecretKey,java.io.File): javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.spec.DESedeKeySpec keyspec = (javax.crypto.spec.DESedeKeySpec) keyfactory.getKeySpec( key, javax.crypto.spec.DESedeKeySpec.class ); byte[] rawkey = keyspec.getKey(); java.io.FileOutputStream out = new java.io.FileOutputStream( f ); out.write( rawkey ); out.close();  =>   javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.spec.DESedeKeySpec keyspec = (javax.crypto.spec.DESedeKeySpec) keyfactory.getKeySpec( key, javax.crypto.spec.DESedeKeySpec.class ); byte[] rawkey = keyspec.getKey(); java.io.FileOutputStream out = new java.io.FileOutputStream( f ); out.write( rawkey );
SDL_3:73:javax.crypto.SecretKey_readKey(java.io.File): java.io.DataInputStream in = new java.io.DataInputStream( new java.io.FileInputStream( f ) ); byte[] rawkey = new byte[(int) f.length()]; in.readFully( rawkey ); in.close(); javax.crypto.spec.DESedeKeySpec keyspec = new javax.crypto.spec.DESedeKeySpec( rawkey ); javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.SecretKey key = keyfactory.generateSecret( keyspec ); return key;  =>   java.io.DataInputStream in = new java.io.DataInputStream( new java.io.FileInputStream( f ) ); byte[] rawkey = new byte[(int) f.length()]; in.close(); javax.crypto.spec.DESedeKeySpec keyspec = new javax.crypto.spec.DESedeKeySpec( rawkey ); javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.SecretKey key = keyfactory.generateSecret( keyspec ); return key;
SDL_4:73:javax.crypto.SecretKey_readKey(java.io.File): java.io.DataInputStream in = new java.io.DataInputStream( new java.io.FileInputStream( f ) ); byte[] rawkey = new byte[(int) f.length()]; in.readFully( rawkey ); in.close(); javax.crypto.spec.DESedeKeySpec keyspec = new javax.crypto.spec.DESedeKeySpec( rawkey ); javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.SecretKey key = keyfactory.generateSecret( keyspec ); return key;  =>   java.io.DataInputStream in = new java.io.DataInputStream( new java.io.FileInputStream( f ) ); byte[] rawkey = new byte[(int) f.length()]; in.readFully( rawkey ); javax.crypto.spec.DESedeKeySpec keyspec = new javax.crypto.spec.DESedeKeySpec( rawkey ); javax.crypto.SecretKeyFactory keyfactory = SecretKeyFactory.getInstance( \"DESede\" ); javax.crypto.SecretKey key = keyfactory.generateSecret( keyspec ); return key;
SDL_5:88:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );
SDL_6:86:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );
SDL_7:88:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } java.util.Arrays.fill( buffer, (byte) 0 );
SDL_8:88:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close(); java.util.Arrays.fill( buffer, (byte) 0 );  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.ENCRYPT_MODE, key ); javax.crypto.CipherOutputStream cos = new javax.crypto.CipherOutputStream( out, cipher ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); } cos.close();
SDL_9:85:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): cos.write( buffer, 0, bytesRead );  =>  
SDL_10:87:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): while ((bytesRead = in.read( buffer )) != -1) {     cos.write( buffer, 0, bytesRead ); }  =>   while (true) {     cos.write( buffer, 0, bytesRead ); }
SDL_11:101:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.DECRYPT_MODE, key ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); } out.flush();  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); } out.flush();
SDL_12:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.DECRYPT_MODE, key ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); } out.flush();  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.DECRYPT_MODE, key ); byte[] buffer = new byte[2048]; int bytesRead; out.flush();
SDL_13:101:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.DECRYPT_MODE, key ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); } out.flush();  =>   javax.crypto.Cipher cipher = Cipher.getInstance( \"DESede\" ); cipher.init( Cipher.DECRYPT_MODE, key ); byte[] buffer = new byte[2048]; int bytesRead; while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); }
SDL_14:99:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): out.write( cipher.update( buffer, 0, bytesRead ) );  =>  
SDL_15:101:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream): while ((bytesRead = in.read( buffer )) != -1) {     out.write( cipher.update( buffer, 0, bytesRead ) ); }  =>   while (true) {     out.write( cipher.update( buffer, 0, bytesRead ) ); }
ODL_1:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):-1 => 1
ODL_2:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):(bytesRead = in.read( buffer )) != -1 => bytesRead = in.read( buffer )
ODL_3:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):(bytesRead = in.read( buffer )) != -1 => -1
ODL_4:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):-1 => 1
ODL_5:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):(bytesRead = in.read( buffer )) != -1 => bytesRead = in.read( buffer )
ODL_6:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):(bytesRead = in.read( buffer )) != -1 => -1
CDL_1:84:void_encrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):-1 =>  
CDL_2:98:void_decrypt(javax.crypto.SecretKey,java.io.InputStream,java.io.OutputStream):-1 =>  
